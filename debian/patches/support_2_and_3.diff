--- a/django_housekeeping/run.py
+++ b/django_housekeeping/run.py
@@ -31,6 +31,13 @@ import time
 import inspect
 import logging
 
+import six
+if sys.version_info[0] >= 3: # Python 3
+    global unicode
+    unicode = str
+    global xrange
+    xrange = range
+
 log = logging.getLogger(__name__)
 
 class RunInfo(object):
@@ -96,7 +103,7 @@ class Schedule(object):
         for i in xrange(len(self.sequence) - 1):
             selected.add((self.sequence[i], self.sequence[i+1]))
 
-        for prev, arcs in self.graph.iteritems():
+        for prev, arcs in six.iteritems(self.graph):
             for next in arcs:
                 if (prev, next) in selected:
                     selected.discard((prev, next))
@@ -126,10 +133,10 @@ class Stage(object):
         self.task_sequence to the sorted list of Task objects
         """
         # Create nodes for all tasks
-        for task in self.tasks.itervalues():
+        for task in six.itervalues(self.tasks):
             self.task_schedule.add_node(task.IDENTIFIER)
 
-        for task in self.tasks.itervalues():
+        for task in six.itervalues(self.tasks):
             next = task.IDENTIFIER
             for prev in (x.IDENTIFIER for x in task.DEPENDS):
                 if prev not in self.task_schedule.graph:
@@ -229,7 +236,7 @@ class Outdir(object):
         # Ensure the root dir exists
         if not os.path.exists(self.root):
             log.warning("output directory %s does not exist: creating it", self.root)
-            os.makedirs(self.root, 0777)
+            os.makedirs(self.root, 0o777)
 
         # Create a new directory for this maintenance run
         candidate = None
@@ -240,7 +247,7 @@ class Outdir(object):
                 time.sleep(0.5)
                 candidate = os.path.join(self.root, datetime.datetime.utcnow().strftime("%Y%m%d-%H%M%S"))
             try:
-                os.mkdir(candidate, 0777)
+                os.mkdir(candidate, 0o777)
                 break
             except OSError as e:
                 import errno
@@ -256,7 +263,7 @@ class Outdir(object):
         """
         res = os.path.join(self.outdir, relpath)
         if not os.path.exists(res):
-            os.makedirs(res, 0777)
+            os.makedirs(res, 0o777)
         return res
 
     def cleanup(self):
@@ -408,7 +415,7 @@ class Housekeeping(object):
 
         # Schedule execution of stages and tasks
         self.stage_schedule.schedule()
-        for stage in self.stages.itervalues():
+        for stage in six.itervalues(self.stages):
             stage.schedule()
 
     def run(self, run_filter=None):
@@ -451,7 +458,7 @@ class Housekeeping(object):
         self.stage_schedule.make_dot(out)
         print("}", file=out)
 
-        for stage in self.stages.itervalues():
+        for stage in six.itervalues(self.stages):
             print("digraph {} {{".format(stage.name), file=out)
             print('  label="Stage {}"'.format(stage.name), file=out)
             stage.task_schedule.make_dot(out)
--- a/django_housekeeping/tests.py
+++ b/django_housekeeping/tests.py
@@ -34,11 +34,11 @@ class TestHousekeeping(unittest.TestCase
         h.register_task(TestTask)
         h.init()
         h.run()
-        self.assertEquals(TestTask.run_count, 1)
+        self.assertEqual(TestTask.run_count, 1)
 
 class TestToposort(unittest.TestCase):
     def test_simple(self):
-        self.assertEquals(toposort.sort({ 0 : [2], 1: [2], 2: [3], 3: [] }), [1, 0, 2, 3])
+        self.assertEqual(toposort.sort({ 0 : [2], 1: [2], 2: [3], 3: [] }), [1, 0, 2, 3])
         self.assertRaises(ValueError, toposort.sort, { 0: [1], 1: [2], 2: [3], 3: [1] })
         self.assertRaises(ValueError, toposort.sort, { 0: [1], 1: [0], 2: [3], 3: [2] })
 
@@ -71,7 +71,7 @@ class TestToposort(unittest.TestCase):
         h.register_task(LoadData)
         h.init()
         order = [(stage.name, task.IDENTIFIER) for stage, task in h.get_schedule()]
-        self.assertEquals(order, [
+        self.assertEqual(order, [
             ('backup', 'django_housekeeping.tests.Backup1'),
             ('backup', 'django_housekeeping.tests.Backup2'),
             ('main', 'django_housekeeping.tests.LoadData'),
@@ -89,7 +89,7 @@ class TestToposort(unittest.TestCase):
         h.register_task(Backup)
         h.init()
         order = [(stage.name, task.IDENTIFIER) for stage, task in h.get_schedule()]
-        self.assertEquals(order, [
+        self.assertEqual(order, [
             (u'backup', u'django_housekeeping.tests.Backup'),
         ])
 
@@ -116,8 +116,8 @@ class TestDependencies(unittest.TestCase
         h.init()
         h.run()
 
-        self.assertEquals(Associator.run_count, 1)
-        self.assertEquals(Associator.call_history, ["foo"])
+        self.assertEqual(Associator.run_count, 1)
+        self.assertEqual(Associator.call_history, ["foo"])
 
 class TestReport(unittest.TestCase):
     def setUp(self):
--- a/django_housekeeping/toposort.py
+++ b/django_housekeeping/toposort.py
@@ -23,6 +23,11 @@ from __future__ import absolute_import
 from __future__ import division
 from __future__ import unicode_literals
 
+import sys
+if sys.version_info[0] >= 3: # Python 3
+    global unicode
+    unicode = str
+
 # From: http://www.logarithmic.net/pfh/blog/01208083168
 # and: http://www.logarithmic.net/pfh-files/blog/01208083168/tarjan.py
 def strongly_connected_components(graph):
--- a/django_housekeeping/report.py
+++ b/django_housekeeping/report.py
@@ -23,6 +23,8 @@ import io
 import os, os.path
 import sys
 
+import six
+
 class Report(object):
     def __init__(self, hk):
         self.hk = hk
@@ -118,7 +120,7 @@ class Report(object):
             print('  label="Stages"', file=out)
             self.hk.stage_schedule.make_dot(out)
             print("}", file=out)
-        for stage in self.hk.stages.itervalues():
+        for stage in six.itervalues(self.hk.stages):
             with self.make_dotfile("stage-{}.dot".format(stage.name)) as out:
                 print("digraph {} {{".format(stage.name), file=out)
                 print('  label="Stage {}"'.format(stage.name), file=out)
